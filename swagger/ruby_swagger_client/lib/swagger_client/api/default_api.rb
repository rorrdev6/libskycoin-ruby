=begin
#Skycoin REST API.

#Skycoin is a next-generation cryptocurrency.

OpenAPI spec version: 0.25.0
Contact: skycoin.doe@example.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module SwaggerClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Returns the total number of unique address that have coins.
    # 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse200]
    def address_count(opts = {})
      data, _status_code, _headers = address_count_with_http_info(opts)
      return data
    end

    # Returns the total number of unique address that have coins.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse200, Fixnum, Hash)>] InlineResponse200 data, response status code and response headers
    def address_count_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.address_count ..."
      end
      # resource path
      local_var_path = "/api/v1/addresscount"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['csrfAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#address_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # coinSupplyHandler returns coin distribution supply stats
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def coin_supply(opts = {})
      coin_supply_with_http_info(opts)
      return nil
    end

    # 
    # coinSupplyHandler returns coin distribution supply stats
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def coin_supply_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.coin_supply ..."
      end
      # resource path
      local_var_path = "/api/v1/coinSupply"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#coin_supply\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a new CSRF token. Previous CSRF tokens are invalidated by this call.
    # 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2001]
    def csrf(opts = {})
      data, _status_code, _headers = csrf_with_http_info(opts)
      return data
    end

    # Creates a new CSRF token. Previous CSRF tokens are invalidated by this call.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2001, Fixnum, Hash)>] InlineResponse2001 data, response status code and response headers
    def csrf_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.csrf ..."
      end
      # resource path
      local_var_path = "/api/v1/csrf"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2001')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#csrf\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # defaultConnectionsHandler returns the list of default hardcoded bootstrap addresses.\\n They are not necessarily connected to.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<String>]
    def default_connections(opts = {})
      data, _status_code, _headers = default_connections_with_http_info(opts)
      return data
    end

    # defaultConnectionsHandler returns the list of default hardcoded bootstrap addresses.\\n They are not necessarily connected to.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<String>, Fixnum, Hash)>] Array<String> data, response status code and response headers
    def default_connections_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.default_connections ..."
      end
      # resource path
      local_var_path = "/api/v1/network/defaultConnections"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['csrfAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<String>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#default_connections\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns node health data.
    # 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2002]
    def health(opts = {})
      data, _status_code, _headers = health_with_http_info(opts)
      return data
    end

    # Returns node health data.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2002, Fixnum, Hash)>] InlineResponse2002 data, response status code and response headers
    def health_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.health ..."
      end
      # resource path
      local_var_path = "/api/v1/health"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2002')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#health\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # This endpoint returns a specific connection.
    # 
    # @param addr Address port
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2003]
    def network_connection(addr, opts = {})
      data, _status_code, _headers = network_connection_with_http_info(addr, opts)
      return data
    end

    # This endpoint returns a specific connection.
    # 
    # @param addr Address port
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2003, Fixnum, Hash)>] InlineResponse2003 data, response status code and response headers
    def network_connection_with_http_info(addr, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.network_connection ..."
      end
      # verify the required parameter 'addr' is set
      if @api_client.config.client_side_validation && addr.nil?
        fail ArgumentError, "Missing the required parameter 'addr' when calling DefaultApi.network_connection"
      end
      # resource path
      local_var_path = "/api/v1/network/connection"

      # query parameters
      query_params = {}
      query_params[:'addr'] = addr

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['csrfAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2003')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#network_connection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # This endpoint returns all outgoings connections.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :states Connection status.
    # @option opts [String] :direction Direction of the connection.
    # @return [Array<InlineResponse2003>]
    def network_connections(opts = {})
      data, _status_code, _headers = network_connections_with_http_info(opts)
      return data
    end

    # This endpoint returns all outgoings connections.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :states Connection status.
    # @option opts [String] :direction Direction of the connection.
    # @return [Array<(Array<InlineResponse2003>, Fixnum, Hash)>] Array<InlineResponse2003> data, response status code and response headers
    def network_connections_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.network_connections ..."
      end
      if @api_client.config.client_side_validation && opts[:'states'] && !['pending', 'connected', 'introduced'].include?(opts[:'states'])
        fail ArgumentError, 'invalid value for "states", must be one of pending, connected, introduced'
      end
      if @api_client.config.client_side_validation && opts[:'direction'] && !['connected', 'introduced'].include?(opts[:'direction'])
        fail ArgumentError, 'invalid value for "direction", must be one of connected, introduced'
      end
      # resource path
      local_var_path = "/api/v1/network/connections"

      # query parameters
      query_params = {}
      query_params[:'states'] = opts[:'states'] if !opts[:'states'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['csrfAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<InlineResponse2003>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#network_connections\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # This endpoint disconnects a connection by ID or address
    # @param id Address id.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def network_connections_disconnect(id, opts = {})
      network_connections_disconnect_with_http_info(id, opts)
      return nil
    end

    # 
    # This endpoint disconnects a connection by ID or address
    # @param id Address id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def network_connections_disconnect_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.network_connections_disconnect ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.network_connections_disconnect"
      end
      # resource path
      local_var_path = "/api/v1/network/connection/disconnect"

      # query parameters
      query_params = {}
      query_params[:'id'] = id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['csrfAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#network_connections_disconnect\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # This endpoint returns all connections found through peer exchange
    # @param [Hash] opts the optional parameters
    # @return [Array<String>]
    def network_connections_exchange(opts = {})
      data, _status_code, _headers = network_connections_exchange_with_http_info(opts)
      return data
    end

    # 
    # This endpoint returns all connections found through peer exchange
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<String>, Fixnum, Hash)>] Array<String> data, response status code and response headers
    def network_connections_exchange_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.network_connections_exchange ..."
      end
      # resource path
      local_var_path = "/api/v1/network/connections/exchange"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['csrfAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<String>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#network_connections_exchange\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # trustConnectionsHandler returns all trusted connections.\\n They are not necessarily connected to. In the default configuration, these will be a subset of the default hardcoded bootstrap addresses.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<String>]
    def network_connections_trust(opts = {})
      data, _status_code, _headers = network_connections_trust_with_http_info(opts)
      return data
    end

    # trustConnectionsHandler returns all trusted connections.\\n They are not necessarily connected to. In the default configuration, these will be a subset of the default hardcoded bootstrap addresses.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<String>, Fixnum, Hash)>] Array<String> data, response status code and response headers
    def network_connections_trust_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.network_connections_trust ..."
      end
      # resource path
      local_var_path = "/api/v1/network/connections/trust"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['csrfAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<String>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#network_connections_trust\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Broadcasts all unconfirmed transactions from the unconfirmed transaction pool
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def resend_unconfirmed_txns(opts = {})
      resend_unconfirmed_txns_with_http_info(opts)
      return nil
    end

    # 
    # Broadcasts all unconfirmed transactions from the unconfirmed transaction pool
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def resend_unconfirmed_txns_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.resend_unconfirmed_txns ..."
      end
      # resource path
      local_var_path = "/api/v1/resendUnconfirmedTxns"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#resend_unconfirmed_txns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # healthHandler returns node health data.
    # 
    # @param address Address id.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2009]
    def verify_address(address, opts = {})
      data, _status_code, _headers = verify_address_with_http_info(address, opts)
      return data
    end

    # healthHandler returns node health data.
    # 
    # @param address Address id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2009, Fixnum, Hash)>] InlineResponse2009 data, response status code and response headers
    def verify_address_with_http_info(address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.verify_address ..."
      end
      # verify the required parameter 'address' is set
      if @api_client.config.client_side_validation && address.nil?
        fail ArgumentError, "Missing the required parameter 'address' when calling DefaultApi.verify_address"
      end
      # resource path
      local_var_path = "/api/v2/address/verify"

      # query parameters
      query_params = {}
      query_params[:'address'] = address

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['csrfAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2009')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#verify_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # versionHandler returns the application version info
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def version(opts = {})
      version_with_http_info(opts)
      return nil
    end

    # 
    # versionHandler returns the application version info
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def version_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.version ..."
      end
      # resource path
      local_var_path = "/api/v1/version"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a wallet by id.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id tags to filter by
    # @return [WalletMeta]
    def wallet(opts = {})
      data, _status_code, _headers = wallet_with_http_info(opts)
      return data
    end

    # Returns a wallet by id.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id tags to filter by
    # @return [Array<(WalletMeta, Fixnum, Hash)>] WalletMeta data, response status code and response headers
    def wallet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.wallet ..."
      end
      # resource path
      local_var_path = "/api/v1/wallet"

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WalletMeta')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#wallet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the wallet's balance, both confirmed and predicted.  The predicted balance is the confirmed balance minus the pending spends.
    # 
    # @param id tags to filter by
    # @param [Hash] opts the optional parameters
    # @return [InlineResponseDefault]
    def wallet_balance(id, opts = {})
      data, _status_code, _headers = wallet_balance_with_http_info(id, opts)
      return data
    end

    # Returns the wallet&#39;s balance, both confirmed and predicted.  The predicted balance is the confirmed balance minus the pending spends.
    # 
    # @param id tags to filter by
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponseDefault, Fixnum, Hash)>] InlineResponseDefault data, response status code and response headers
    def wallet_balance_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.wallet_balance ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.wallet_balance"
      end
      # resource path
      local_var_path = "/api/v1/wallet/balance"

      # query parameters
      query_params = {}
      query_params[:'id'] = id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponseDefault')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#wallet_balance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns the wallet directory path
    # @param addr Address port
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2008]
    def wallet_folder(addr, opts = {})
      data, _status_code, _headers = wallet_folder_with_http_info(addr, opts)
      return data
    end

    # 
    # Returns the wallet directory path
    # @param addr Address port
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2008, Fixnum, Hash)>] InlineResponse2008 data, response status code and response headers
    def wallet_folder_with_http_info(addr, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.wallet_folder ..."
      end
      # verify the required parameter 'addr' is set
      if @api_client.config.client_side_validation && addr.nil?
        fail ArgumentError, "Missing the required parameter 'addr' when calling DefaultApi.wallet_folder"
      end
      # resource path
      local_var_path = "/api/v1/wallets/folderName"

      # query parameters
      query_params = {}
      query_params[:'addr'] = addr

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['csrfAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2008')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#wallet_folder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Generates new addresses
    # @param id Wallet Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :num The number you want to generate
    # @option opts [String] :password Wallet Password
    # @return [InlineResponse2004]
    def wallet_new_address(id, opts = {})
      data, _status_code, _headers = wallet_new_address_with_http_info(id, opts)
      return data
    end

    # 
    # Generates new addresses
    # @param id Wallet Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :num The number you want to generate
    # @option opts [String] :password Wallet Password
    # @return [Array<(InlineResponse2004, Fixnum, Hash)>] InlineResponse2004 data, response status code and response headers
    def wallet_new_address_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.wallet_new_address ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.wallet_new_address"
      end
      # resource path
      local_var_path = "/api/v1/wallet/newAddress"

      # query parameters
      query_params = {}
      query_params[:'id'] = id
      query_params[:'num'] = opts[:'num'] if !opts[:'num'].nil?
      query_params[:'password'] = opts[:'password'] if !opts[:'password'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2004')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#wallet_new_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns the wallet directory path
    # @param [Hash] opts the optional parameters
    # @option opts [String] :entropy Entropy bitSize.
    # @return [InlineResponse2005]
    def wallet_new_seed(opts = {})
      data, _status_code, _headers = wallet_new_seed_with_http_info(opts)
      return data
    end

    # 
    # Returns the wallet directory path
    # @param [Hash] opts the optional parameters
    # @option opts [String] :entropy Entropy bitSize.
    # @return [Array<(InlineResponse2005, Fixnum, Hash)>] InlineResponse2005 data, response status code and response headers
    def wallet_new_seed_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.wallet_new_seed ..."
      end
      if @api_client.config.client_side_validation && opts[:'entropy'] && !['128', '256'].include?(opts[:'entropy'])
        fail ArgumentError, 'invalid value for "entropy", must be one of 128, 256'
      end
      # resource path
      local_var_path = "/api/v1/wallet/newSeed"

      # query parameters
      query_params = {}
      query_params[:'entropy'] = opts[:'entropy'] if !opts[:'entropy'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['csrfAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2005')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#wallet_new_seed\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # This endpoint only works for encrypted wallets. If the wallet is unencrypted, The seed will be not returned.
    # 
    # @param id Wallet Id.
    # @param password Wallet password.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2005]
    def wallet_seed(id, password, opts = {})
      data, _status_code, _headers = wallet_seed_with_http_info(id, password, opts)
      return data
    end

    # This endpoint only works for encrypted wallets. If the wallet is unencrypted, The seed will be not returned.
    # 
    # @param id Wallet Id.
    # @param password Wallet password.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2005, Fixnum, Hash)>] InlineResponse2005 data, response status code and response headers
    def wallet_seed_with_http_info(id, password, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.wallet_seed ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.wallet_seed"
      end
      # verify the required parameter 'password' is set
      if @api_client.config.client_side_validation && password.nil?
        fail ArgumentError, "Missing the required parameter 'password' when calling DefaultApi.wallet_seed"
      end
      # resource path
      local_var_path = "/api/v1/wallet/seed"

      # query parameters
      query_params = {}
      query_params[:'id'] = id
      query_params[:'password'] = password

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['csrfAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2005')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#wallet_seed\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the wallet.
    # 
    # @param id Wallet Id.
    # @param label The label the wallet will be updated to.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2006]
    def wallet_update(id, label, opts = {})
      data, _status_code, _headers = wallet_update_with_http_info(id, label, opts)
      return data
    end

    # Update the wallet.
    # 
    # @param id Wallet Id.
    # @param label The label the wallet will be updated to.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2006, Fixnum, Hash)>] InlineResponse2006 data, response status code and response headers
    def wallet_update_with_http_info(id, label, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.wallet_update ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.wallet_update"
      end
      # verify the required parameter 'label' is set
      if @api_client.config.client_side_validation && label.nil?
        fail ArgumentError, "Missing the required parameter 'label' when calling DefaultApi.wallet_update"
      end
      # resource path
      local_var_path = "/api/v1/wallet/update"

      # query parameters
      query_params = {}
      query_params[:'id'] = id
      query_params[:'label'] = label

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['csrfAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2006')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#wallet_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns all loaded wallets
    # @param [Hash] opts the optional parameters
    # @return [Array<InlineResponse2007>]
    def wallets(opts = {})
      data, _status_code, _headers = wallets_with_http_info(opts)
      return data
    end

    # 
    # Returns all loaded wallets
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<InlineResponse2007>, Fixnum, Hash)>] Array<InlineResponse2007> data, response status code and response headers
    def wallets_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.wallets ..."
      end
      # resource path
      local_var_path = "/api/v1/wallets"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['csrfAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<InlineResponse2007>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#wallets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
