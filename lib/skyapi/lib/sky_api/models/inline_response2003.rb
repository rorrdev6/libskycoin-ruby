=begin
#Skycoin REST API.

#Skycoin is a next-generation cryptocurrency.

OpenAPI spec version: 0.25.1
Contact: contact@skycoin.net
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 3.3.4

=end

require 'date'

module SkyApi
  class InlineResponse2003
    attr_accessor :last_received

    attr_accessor :last_sent

    attr_accessor :outgoing

    attr_accessor :mirror

    attr_accessor :address

    attr_accessor :listen_port

    attr_accessor :is_trusted_peer

    attr_accessor :connected_at

    attr_accessor :unconfirmed_verify_transaction

    attr_accessor :id

    attr_accessor :state

    attr_accessor :user_agent

    attr_accessor :height

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'last_received' => :'last_received',
        :'last_sent' => :'last_sent',
        :'outgoing' => :'outgoing',
        :'mirror' => :'mirror',
        :'address' => :'address',
        :'listen_port' => :'listen_port',
        :'is_trusted_peer' => :'is_trusted_peer',
        :'connected_at' => :'connected_at',
        :'unconfirmed_verify_transaction' => :'unconfirmed_verify_transaction',
        :'id' => :'id',
        :'state' => :'state',
        :'user_agent' => :'user_agent',
        :'height' => :'height'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'last_received' => :'Integer',
        :'last_sent' => :'Integer',
        :'outgoing' => :'BOOLEAN',
        :'mirror' => :'Integer',
        :'address' => :'String',
        :'listen_port' => :'Integer',
        :'is_trusted_peer' => :'BOOLEAN',
        :'connected_at' => :'Integer',
        :'unconfirmed_verify_transaction' => :'InlineResponse2003UnconfirmedVerifyTransaction',
        :'id' => :'Integer',
        :'state' => :'String',
        :'user_agent' => :'String',
        :'height' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'last_received')
        self.last_received = attributes[:'last_received']
      end

      if attributes.has_key?(:'last_sent')
        self.last_sent = attributes[:'last_sent']
      end

      if attributes.has_key?(:'outgoing')
        self.outgoing = attributes[:'outgoing']
      end

      if attributes.has_key?(:'mirror')
        self.mirror = attributes[:'mirror']
      end

      if attributes.has_key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.has_key?(:'listen_port')
        self.listen_port = attributes[:'listen_port']
      end

      if attributes.has_key?(:'is_trusted_peer')
        self.is_trusted_peer = attributes[:'is_trusted_peer']
      end

      if attributes.has_key?(:'connected_at')
        self.connected_at = attributes[:'connected_at']
      end

      if attributes.has_key?(:'unconfirmed_verify_transaction')
        self.unconfirmed_verify_transaction = attributes[:'unconfirmed_verify_transaction']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.has_key?(:'user_agent')
        self.user_agent = attributes[:'user_agent']
      end

      if attributes.has_key?(:'height')
        self.height = attributes[:'height']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      state_validator = EnumAttributeValidator.new('String', ['pending', 'connected', 'introduced'])
      return false unless state_validator.valid?(@state)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(state)
      validator = EnumAttributeValidator.new('String', ['pending', 'connected', 'introduced'])
      unless validator.valid?(state)
        fail ArgumentError, 'invalid value for "state", must be one of #{validator.allowable_values}.'
      end
      @state = state
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          last_received == o.last_received &&
          last_sent == o.last_sent &&
          outgoing == o.outgoing &&
          mirror == o.mirror &&
          address == o.address &&
          listen_port == o.listen_port &&
          is_trusted_peer == o.is_trusted_peer &&
          connected_at == o.connected_at &&
          unconfirmed_verify_transaction == o.unconfirmed_verify_transaction &&
          id == o.id &&
          state == o.state &&
          user_agent == o.user_agent &&
          height == o.height
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [last_received, last_sent, outgoing, mirror, address, listen_port, is_trusted_peer, connected_at, unconfirmed_verify_transaction, id, state, user_agent, height].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SkyApi.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
